<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="de/d55/a00323" kind="file" language="C++">
    <compoundname>IccJsonUtil.cpp</compoundname>
    <includes refid="dd/d4e/a00329" local="yes">IccJsonUtil.h</includes>
    <includes refid="d7/dce/a00143" local="yes">IccUtil.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="7">
        <label>../../../IccProfLib/IccDefs.h</label>
        <link refid="d4/d81/a00110"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>IccProfLibConf.h</label>
        <link refid="d5/d16/a00029"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>IccUtil.h</label>
        <link refid="d7/dce/a00143"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>icProfileHeader.h</label>
        <link refid="d7/d46/a00002"/>
      </node>
      <node id="1">
        <label>Tools/CmdLine/IccCommon/IccJsonUtil.cpp</label>
        <link refid="de/d55/a00323"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>IccJsonUtil.h</label>
        <link refid="dd/d4e/a00329"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>limits</label>
      </node>
      <node id="3">
        <label>list</label>
      </node>
      <node id="6">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="de/d55/a00323_1a92484c589dda7d604e92b4f5fe73549c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string arrayToJson</definition>
        <argsstring>(T *a, int nCount)</argsstring>
        <name>arrayToJson</name>
        <param>
          <type>T *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="79" column="14" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="79" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a6bebf3b5aeb23d1321b4f5c26d994bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icInt16Number &gt;</definition>
        <argsstring>(icInt16Number *, int)</argsstring>
        <name>arrayToJson&lt; icInt16Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="104" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a4466005254628798c416d0e89c95df84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icInt32Number &gt;</definition>
        <argsstring>(icInt32Number *, int)</argsstring>
        <name>arrayToJson&lt; icInt32Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="105" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a999d920d0dae8cd8ba4d1389b09d9ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icInt64Number &gt;</definition>
        <argsstring>(icInt64Number *, int)</argsstring>
        <name>arrayToJson&lt; icInt64Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="106" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aea91855a0b21bc3614e37643dbdc3f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icInt8Number &gt;</definition>
        <argsstring>(icInt8Number *, int)</argsstring>
        <name>arrayToJson&lt; icInt8Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="103" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="103" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a345076e5313923ae3fb0748b76327cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icUInt16Number &gt;</definition>
        <argsstring>(icUInt16Number *, int)</argsstring>
        <name>arrayToJson&lt; icUInt16Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="100" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="100" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a13bbbce81e2ae63bac1746bcbfad928b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icUInt32Number &gt;</definition>
        <argsstring>(icUInt32Number *, int)</argsstring>
        <name>arrayToJson&lt; icUInt32Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="101" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a9a65aa05f43688354bf3f926b567a77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icUInt64Number &gt;</definition>
        <argsstring>(icUInt64Number *, int)</argsstring>
        <name>arrayToJson&lt; icUInt64Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="102" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="102" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a7361718b0d7cdd57c972dcec344eea51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string arrayToJson&lt; icUInt8Number &gt;</definition>
        <argsstring>(icUInt8Number *, int)</argsstring>
        <name>arrayToJson&lt; icUInt8Number &gt;</name>
        <param>
          <type><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="99" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a97423525adfd6890ba86ca8d5ad53299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fixJsonString</definition>
        <argsstring>(const char *v)</argsstring>
        <name>fixJsonString</name>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="133" column="13" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="133" bodyend="144"/>
        <referencedby refid="dd/d4e/a00329_1ad0b5bdb7f95051c0e5236d455177b945" compoundref="de/d55/a00323" startline="171" endline="180">valueToJson</referencedby>
        <referencedby refid="dd/d4e/a00329_1a039c947e1628b80bf46015650397d664" compoundref="de/d55/a00323" startline="158" endline="167">valueToJson</referencedby>
        <referencedby refid="dd/d4e/a00329_1ad2527818da85a4bb239f5f5afdc4efbc" compoundref="de/d55/a00323" startline="148" endline="154">valueToJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a102a8f52f949685f78edbdede31931c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jsonToArray</definition>
        <argsstring>(const json &amp;v, std::vector&lt; std::string &gt; &amp;vals)</argsstring>
        <name>jsonToArray</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="292" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="292" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aea94576be4b30a5e2ad35c6c682098a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool jsonToArray</definition>
        <argsstring>(const json &amp;v, std::vector&lt; T &gt; &amp;a)</argsstring>
        <name>jsonToArray</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="333" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="333" bodyend="353"/>
        <referencedby refid="d6/d3b/a02121_1a4b06d5de03639308b6c9e0394829e111" compoundref="d8/d23/a00326" startline="1796" endline="1816">CIccCfgDataEntry::fromJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a1c75825526d396c4a3d02e2be8d5b2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool jsonToArray</definition>
        <argsstring>(const json &amp;v, T *vals, int n)</argsstring>
        <name>jsonToArray</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="263" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="263" bodyend="278"/>
        <referencedby refid="d6/d3b/a02121_1a4b06d5de03639308b6c9e0394829e111" compoundref="d8/d23/a00326" startline="1796" endline="1816">CIccCfgDataEntry::fromJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ace04c15a87eeacd2d12f5c1560996c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; double &gt;</definition>
        <argsstring>(const json &amp;, double *, int)</argsstring>
        <name>jsonToArray&lt; double &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>double *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="290" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="290" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aafdace1e5c32e16b3a7288bb66fac3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; double &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; double &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; double &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="364" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="364" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a99b7f325dac3d75544289f6090264485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; float &gt;</definition>
        <argsstring>(const json &amp;, float *, int)</argsstring>
        <name>jsonToArray&lt; float &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>float *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="289" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="289" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aac7cccdebda264b8d46244630dc22148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; float &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; float &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; float &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="363" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="363" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a2eb13bddfcefaf04ee89cd394a3cbec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt16Number &gt;</definition>
        <argsstring>(const json &amp;, icInt16Number *, int)</argsstring>
        <name>jsonToArray&lt; icInt16Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="283" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="283" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a71afd553a447b4f21b66be76685bddf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt16Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icInt16Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icInt16Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="357" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="357" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a2327c5c9fca48446258feda01339cd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt32Number &gt;</definition>
        <argsstring>(const json &amp;, icInt32Number *, int)</argsstring>
        <name>jsonToArray&lt; icInt32Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="285" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="285" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aacea74a6830eab83023e67d25115b35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt32Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icInt32Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icInt32Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="359" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="359" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aa66e373cef646ba482a3e9ef37b102a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt64Number &gt;</definition>
        <argsstring>(const json &amp;, icInt64Number *, int)</argsstring>
        <name>jsonToArray&lt; icInt64Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="287" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="287" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ac7886ed9a4caa3e6a22b41ad4133c1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt64Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icInt64Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icInt64Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="361" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="361" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a8df13aa2900ff6efc8847cc181257329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt8Number &gt;</definition>
        <argsstring>(const json &amp;, icInt8Number *, int)</argsstring>
        <name>jsonToArray&lt; icInt8Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="281" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="281" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ac369cfa994f9edc702bdac99f6a91426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icInt8Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icInt8Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icInt8Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="355" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="355" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aca74087f564626760f18f3108e34311c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt16Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt16Number *, int)</argsstring>
        <name>jsonToArray&lt; icUInt16Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="284" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="284" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1af8137e8db32449061a0744d04d4cf958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt16Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icUInt16Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icUInt16Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="358" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="358" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1af6f9688a503547314242f4f564e9a132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt32Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt32Number *, int)</argsstring>
        <name>jsonToArray&lt; icUInt32Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="286" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="286" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1adbcef783339da3dfdd0b6308744971b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt32Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icUInt32Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icUInt32Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="360" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="360" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ab2375dcf24a7e36bad7eeee7c68ab65c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt64Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt64Number *, int)</argsstring>
        <name>jsonToArray&lt; icUInt64Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="288" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="288" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a9428f3a61580d6692a91ebc25d260ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt64Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icUInt64Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icUInt64Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="362" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="362" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a61ae3d22972ba84219027584052b2d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt8Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt8Number *, int)</argsstring>
        <name>jsonToArray&lt; icUInt8Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref> *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="282" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="282" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a9f37b58701b55e8c0358de63b6e71313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToArray&lt; icUInt8Number &gt;</definition>
        <argsstring>(const json &amp;, std::vector&lt; icUInt8Number &gt; &amp;)</argsstring>
        <name>jsonToArray&lt; icUInt8Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="356" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="356" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a825829a545b125b794248ed18a2c3012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jsonToColorSpace</definition>
        <argsstring>(const json &amp;j, icColorSpaceSignature &amp;sig)</argsstring>
        <name>jsonToColorSpace</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a61e8bac86860cdefe93533feac126917" kindref="member">icColorSpaceSignature</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="379" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="379" bodyend="391"/>
        <references refid="d7/dce/a00143_1a3a009765ea132eda6aadf6bedbf10e2d" compoundref="d5/db1/a00140" startline="1258" endline="1300">icGetSigVal</references>
        <references refid="dd/d4e/a00329_1a9e557563ac390d47119184276e65ae9f" compoundref="de/d55/a00323" startline="200" endline="208">jsonToValue</references>
        <referencedby refid="da/d71/a02101_1a24ef831394cf5804f368aacca344afbe" compoundref="d8/d23/a00326" startline="256" endline="279">CIccCfgDataApply::fromJson</referencedby>
        <referencedby refid="d8/db2/a02125_1a514514ebda19e651ac6ba4ba2b333419" compoundref="d8/d23/a00326" startline="1364" endline="1399">CIccCfgColorData::fromJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1af234f015837440b33d2b84ee2eb3f4d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jsonToCStr</definition>
        <argsstring>(const json &amp;j, char *str, int nSize)</argsstring>
        <name>jsonToCStr</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="367" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="367" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a5d0fcb48d25a5fba1df1a512deec6810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jsonToList</definition>
        <argsstring>(const json &amp;v, std::list&lt; std::string &gt; &amp;vals)</argsstring>
        <name>jsonToList</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::list&lt; std::string &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="314" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="314" bodyend="330"/>
        <referencedby refid="d6/d3b/a02121_1a4b06d5de03639308b6c9e0394829e111" compoundref="d8/d23/a00326" startline="1796" endline="1816">CIccCfgDataEntry::fromJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1afdd3feef27de48318c21d7eb6e15c1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jsonToString</definition>
        <argsstring>(const json &amp;j, std::string &amp;value)</argsstring>
        <name>jsonToString</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="220" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="220" bodyend="228"/>
        <referencedby refid="dd/d4e/a00329_1a4af940dd988c61971f0d7961d2c83f6b" compoundref="de/d55/a00323" startline="257" endline="260">jsonToValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a2c9711fe89fa2303d645e4a5467d153c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool jsonToValue</definition>
        <argsstring>(const json &amp;j, bool &amp;value)</argsstring>
        <name>jsonToValue</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="231" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="231" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a24625906ef9856bee0a0836396101044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool jsonToValue</definition>
        <argsstring>(const json &amp;j, std::string &amp;value)</argsstring>
        <name>jsonToValue</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="257" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="257" bodyend="260"/>
        <references refid="dd/d4e/a00329_1afdd3feef27de48318c21d7eb6e15c1a3" compoundref="de/d55/a00323" startline="220" endline="228">jsonToString</references>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a9e557563ac390d47119184276e65ae9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool jsonToValue</definition>
        <argsstring>(const json &amp;j, T &amp;nValue)</argsstring>
        <name>jsonToValue</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>nValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="200" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="200" bodyend="208"/>
        <referencedby refid="da/d71/a02101_1a24ef831394cf5804f368aacca344afbe" compoundref="d8/d23/a00326" startline="256" endline="279">CIccCfgDataApply::fromJson</referencedby>
        <referencedby refid="db/d7a/a02105_1a629310e36c8c04c088813c362f902dec" compoundref="d8/d23/a00326" startline="397" endline="417">CIccCfgImageApply::fromJson</referencedby>
        <referencedby refid="d7/d16/a02109_1aa315e429821eaca208d659a1c856a92a" compoundref="d8/d23/a00326" startline="492" endline="519">CIccCfgCreateLink::fromJson</referencedby>
        <referencedby refid="d8/dc6/a02113_1af88e2e435af4fba20677d5b276b3c41a" compoundref="d8/d23/a00326" startline="621" endline="663">CIccCfgProfile::fromJson</referencedby>
        <referencedby refid="d6/d3b/a02121_1a4b06d5de03639308b6c9e0394829e111" compoundref="d8/d23/a00326" startline="1796" endline="1816">CIccCfgDataEntry::fromJson</referencedby>
        <referencedby refid="d8/db2/a02125_1a514514ebda19e651ac6ba4ba2b333419" compoundref="d8/d23/a00326" startline="1364" endline="1399">CIccCfgColorData::fromJson</referencedby>
        <referencedby refid="dd/d4e/a00329_1a825829a545b125b794248ed18a2c3012" compoundref="de/d55/a00323" startline="379" endline="391">jsonToColorSpace</referencedby>
        <referencedby refid="d8/d23/a00326_1ae03050a33235e602abf0705735d62814" compoundref="d8/d23/a00326" startline="193" endline="210">jsonToValue</referencedby>
        <referencedby refid="d8/d23/a00326_1a3855c314556756a595732078063b0610" compoundref="d8/d23/a00326" startline="603" endline="619">jsonToValue</referencedby>
        <referencedby refid="d8/d23/a00326_1a262207a15c888252253d33fd4ba7411b" compoundref="d8/d23/a00326" startline="124" endline="133">jsonToValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a9fe5e55064a93837c9607c98846a599e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; double &gt;</definition>
        <argsstring>(const json &amp;, double &amp;)</argsstring>
        <name>jsonToValue&lt; double &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="218" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="218" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a7b1d04e57c10c570c35d1f134014a355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; float &gt;</definition>
        <argsstring>(const json &amp;, float &amp;)</argsstring>
        <name>jsonToValue&lt; float &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>float &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="217" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="217" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ad2d628088d9db80185b45b6bdccb12a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icInt16Number &gt;</definition>
        <argsstring>(const json &amp;, icInt16Number &amp;)</argsstring>
        <name>jsonToValue&lt; icInt16Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="212" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="212" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a7f9c9b446f169e21934bfd051e1450d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icInt64Number &gt;</definition>
        <argsstring>(const json &amp;, icInt64Number &amp;)</argsstring>
        <name>jsonToValue&lt; icInt64Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="215" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="215" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a96266e5f945b9be41d7387b94d97300f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icInt8Number &gt;</definition>
        <argsstring>(const json &amp;, icInt8Number &amp;)</argsstring>
        <name>jsonToValue&lt; icInt8Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="210" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="210" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a1146ef4824804a5456e06c31fdd435fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icUInt16Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt16Number &amp;)</argsstring>
        <name>jsonToValue&lt; icUInt16Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="213" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="213" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1af9de40fa14a8f73d94bee3c86f625819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icUInt32Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt32Number &amp;)</argsstring>
        <name>jsonToValue&lt; icUInt32Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="214" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="214" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a2e2ff62841f6bceaf201b121e5da99ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icUInt64Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt64Number &amp;)</argsstring>
        <name>jsonToValue&lt; icUInt64Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="216" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="216" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ae045dc3553fb33a07534f868a9669d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; icUInt8Number &gt;</definition>
        <argsstring>(const json &amp;, icUInt8Number &amp;)</argsstring>
        <name>jsonToValue&lt; icUInt8Number &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="211" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="211" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a203ef4c2eb9260024afe9cf92bda1d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool jsonToValue&lt; int &gt;</definition>
        <argsstring>(const json &amp;, int &amp;)</argsstring>
        <name>jsonToValue&lt; int &gt;</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
        </param>
        <param>
          <type>int &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="98" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a1a7e979d2174bbe4adf411c6807d202b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool loadJsonFrom</definition>
        <argsstring>(json &amp;j, const char *szFname)</argsstring>
        <name>loadJsonFrom</name>
        <param>
          <type><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szFname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="420" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="420" bodyend="448"/>
        <referencedby refid="d6/de1/a00356_1a217dbf8b442f20279ea00b898af96f52" compoundref="d6/de1/a00356" startline="150" endline="622">main</referencedby>
        <referencedby refid="d3/d93/a00341_1ac0f2228420376f4db7e1274f2b41667c" compoundref="d3/d93/a00341" startline="234" endline="610">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ac9d77e7820256342aa2bb1f73f7b387b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool saveJsonAs</definition>
        <argsstring>(const json &amp;j, const char *szFname, int indent)</argsstring>
        <name>saveJsonAs</name>
        <param>
          <type>const <ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szFname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="393" column="6" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="393" bodyend="418"/>
        <referencedby refid="d3/d93/a00341_1ac0f2228420376f4db7e1274f2b41667c" compoundref="d3/d93/a00341" startline="234" endline="610">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ad0b5bdb7f95051c0e5236d455177b945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string valueToJson</definition>
        <argsstring>(const char *name, char *v)</argsstring>
        <name>valueToJson</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="171" column="13" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="171" bodyend="180"/>
        <references refid="dd/d4e/a00329_1a97423525adfd6890ba86ca8d5ad53299" compoundref="de/d55/a00323" startline="133" endline="144">fixJsonString</references>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a039c947e1628b80bf46015650397d664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string valueToJson</definition>
        <argsstring>(const char *name, const char *v)</argsstring>
        <name>valueToJson</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="158" column="13" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="158" bodyend="167"/>
        <references refid="dd/d4e/a00329_1a97423525adfd6890ba86ca8d5ad53299" compoundref="de/d55/a00323" startline="133" endline="144">fixJsonString</references>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a5fb9fd80b70025aefdf24cb42a4955e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string valueToJson</definition>
        <argsstring>(const char *name, const char *v, bool &amp;bPreviousLine)</argsstring>
        <name>valueToJson</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>bPreviousLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="183" column="13" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="183" bodyend="197"/>
        <references refid="dd/d4e/a00329_1a3e7932b223d3c03d2779e36febbcc670" compoundref="de/d55/a00323" startline="110" endline="118">valueToJson</references>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ad2527818da85a4bb239f5f5afdc4efbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string valueToJson</definition>
        <argsstring>(const char *name, const std::string &amp;v)</argsstring>
        <name>valueToJson</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="148" column="13" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="148" bodyend="154"/>
        <references refid="dd/d4e/a00329_1a97423525adfd6890ba86ca8d5ad53299" compoundref="de/d55/a00323" startline="133" endline="144">fixJsonString</references>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string valueToJson</definition>
        <argsstring>(const char *name, T v)</argsstring>
        <name>valueToJson</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="110" column="13" bodyfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" bodystart="110" bodyend="118"/>
        <referencedby refid="dd/d4e/a00329_1a5fb9fd80b70025aefdf24cb42a4955e6" compoundref="de/d55/a00323" startline="183" endline="197">valueToJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a2dcbb258d4d23500fe492477af329266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; double &gt;</definition>
        <argsstring>(const char *, double)</argsstring>
        <name>valueToJson&lt; double &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="130" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="130" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aa1d6e01ac6e4d4f0309b843e58b110db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; float &gt;</definition>
        <argsstring>(const char *, float)</argsstring>
        <name>valueToJson&lt; float &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="129" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="129" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1aa518217e74bc99aca67bd24bf7750acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icInt16Number &gt;</definition>
        <argsstring>(const char *, icInt16Number)</argsstring>
        <name>valueToJson&lt; icInt16Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="126" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="126" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1acdf23055c826d35552c22ebd95e7a125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icInt32Number &gt;</definition>
        <argsstring>(const char *, icInt32Number)</argsstring>
        <name>valueToJson&lt; icInt32Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="127" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="127" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ad4a82e0b1a3ef95a90d3736d1612028b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icInt64Number &gt;</definition>
        <argsstring>(const char *, icInt64Number)</argsstring>
        <name>valueToJson&lt; icInt64Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="128" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="128" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1adeb96cc39b04eaba5b65f555115dfcb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icInt8Number &gt;</definition>
        <argsstring>(const char *, icInt8Number)</argsstring>
        <name>valueToJson&lt; icInt8Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="125" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="125" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1ab2c971eccb1c038f885ae30f1e517e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icUInt16Number &gt;</definition>
        <argsstring>(const char *, icUInt16Number)</argsstring>
        <name>valueToJson&lt; icUInt16Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="122" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="122" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1af402ce51aa41b72685e576e3bae40eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icUInt32Number &gt;</definition>
        <argsstring>(const char *, icUInt32Number)</argsstring>
        <name>valueToJson&lt; icUInt32Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="123" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1af8c60ac2c02dcd6d371419e11ae17981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icUInt64Number &gt;</definition>
        <argsstring>(const char *, icUInt64Number)</argsstring>
        <name>valueToJson&lt; icUInt64Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="124" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="124" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="de/d55/a00323_1a4cf7541bdebb70d3bd24e6a594b588db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::string</type>
        <definition>template std::string valueToJson&lt; icUInt8Number &gt;</definition>
        <argsstring>(const char *, icUInt8Number)</argsstring>
        <name>valueToJson&lt; icUInt8Number &gt;</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" line="121" column="10" declfile="Tools/CmdLine/IccCommon/IccJsonUtil.cpp" declline="121" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>IccJsonUtil.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>Contains:<sp/><sp/><sp/>Utility<sp/>function<sp/>with<sp/>working<sp/>with<sp/>nlohmann/json<sp/>objects</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>Version:<sp/><sp/><sp/><sp/>V1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright:<sp/><sp/>(c)<sp/>see<sp/>below</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>ICC<sp/>Software<sp/>License,<sp/>Version<sp/>0.2</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2003-2024<sp/>The<sp/>International<sp/>Color<sp/>Consortium.<sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>3.<sp/>In<sp/>the<sp/>absence<sp/>of<sp/>prior<sp/>written<sp/>permission,<sp/>the<sp/>names<sp/>&quot;ICC&quot;<sp/>and<sp/>&quot;The</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>International<sp/>Color<sp/>Consortium&quot;<sp/>must<sp/>not<sp/>be<sp/>used<sp/>to<sp/>imply<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>ICC<sp/>organization<sp/>endorses<sp/>or<sp/>promotes<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>INTERNATIONAL<sp/>COLOR<sp/>CONSORTIUM<sp/>OR</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>ITS<sp/>CONTRIBUTING<sp/>MEMBERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>consists<sp/>of<sp/>voluntary<sp/>contributions<sp/>made<sp/>by<sp/>many</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>individuals<sp/>on<sp/>behalf<sp/>of<sp/>the<sp/>The<sp/>International<sp/>Color<sp/>Consortium.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>Membership<sp/>in<sp/>the<sp/>ICC<sp/>is<sp/>encouraged<sp/>when<sp/>this<sp/>software<sp/>is<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>commercial<sp/>purposes.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>For<sp/>more<sp/>information<sp/>on<sp/>The<sp/>International<sp/>Color<sp/>Consortium,<sp/>please</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>see<sp/>&lt;http://www.color.org/&gt;.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>HISTORY:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>-Initial<sp/>implementation<sp/>by<sp/>Max<sp/>Derhak<sp/>1-11-2024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>-Added<sp/>Explicit<sp/>Template<sp/>Instantiations<sp/>D<sp/>Hoyt<sp/>18-MAR-2025</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dd/d4e/a00329" kindref="compound">IccJsonUtil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/dce/a00143" kindref="compound">IccUtil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>std::to_string<sp/>fallback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="79" refid="dd/d4e/a00329_1a92484c589dda7d604e92b4f5fe73549c" refkind="member"><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a92484c589dda7d604e92b4f5fe73549c" kindref="member">arrayToJson</ref>(T*<sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCount)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::string<sp/>str,<sp/>num;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>std::to_string(a[i]);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>num;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="de/d55/a00323_1a203ef4c2eb9260024afe9cf92bda1d8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a203ef4c2eb9260024afe9cf92bda1d8e" kindref="member">jsonToValue&lt;int&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;);</highlight></codeline>
<codeline lineno="99" refid="de/d55/a00323_1a7361718b0d7cdd57c972dcec344eea51" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a7361718b0d7cdd57c972dcec344eea51" kindref="member">arrayToJson&lt;icUInt8Number&gt;</ref>(<ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100" refid="de/d55/a00323_1a345076e5313923ae3fb0748b76327cc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a345076e5313923ae3fb0748b76327cc2" kindref="member">arrayToJson&lt;icUInt16Number&gt;</ref>(<ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101" refid="de/d55/a00323_1a13bbbce81e2ae63bac1746bcbfad928b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a13bbbce81e2ae63bac1746bcbfad928b" kindref="member">arrayToJson&lt;icUInt32Number&gt;</ref>(<ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102" refid="de/d55/a00323_1a9a65aa05f43688354bf3f926b567a77a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a9a65aa05f43688354bf3f926b567a77a" kindref="member">arrayToJson&lt;icUInt64Number&gt;</ref>(<ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103" refid="de/d55/a00323_1aea91855a0b21bc3614e37643dbdc3f76" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1aea91855a0b21bc3614e37643dbdc3f76" kindref="member">arrayToJson&lt;icInt8Number&gt;</ref>(<ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104" refid="de/d55/a00323_1a6bebf3b5aeb23d1321b4f5c26d994bce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a6bebf3b5aeb23d1321b4f5c26d994bce" kindref="member">arrayToJson&lt;icInt16Number&gt;</ref>(<ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105" refid="de/d55/a00323_1a4466005254628798c416d0e89c95df84" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a4466005254628798c416d0e89c95df84" kindref="member">arrayToJson&lt;icInt32Number&gt;</ref>(<ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106" refid="de/d55/a00323_1a999d920d0dae8cd8ba4d1389b09d9ea3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a999d920d0dae8cd8ba4d1389b09d9ea3" kindref="member">arrayToJson&lt;icInt64Number&gt;</ref>(<ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>General<sp/>template<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="110" refid="dd/d4e/a00329_1a3e7932b223d3c03d2779e36febbcc670" refkind="member"><highlight class="normal">std::string<sp/><ref refid="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" kindref="member">valueToJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>T<sp/>v)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Safeguard<sp/>for<sp/>nullptr<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;name<sp/>cannot<sp/>be<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(v);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations<sp/>for<sp/>supported<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="de/d55/a00323_1a4cf7541bdebb70d3bd24e6a594b588db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a4cf7541bdebb70d3bd24e6a594b588db" kindref="member">valueToJson&lt;icUInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref>);</highlight></codeline>
<codeline lineno="122" refid="de/d55/a00323_1ab2c971eccb1c038f885ae30f1e517e24" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1ab2c971eccb1c038f885ae30f1e517e24" kindref="member">valueToJson&lt;icUInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref>);</highlight></codeline>
<codeline lineno="123" refid="de/d55/a00323_1af402ce51aa41b72685e576e3bae40eda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1af402ce51aa41b72685e576e3bae40eda" kindref="member">valueToJson&lt;icUInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref>);</highlight></codeline>
<codeline lineno="124" refid="de/d55/a00323_1af8c60ac2c02dcd6d371419e11ae17981" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1af8c60ac2c02dcd6d371419e11ae17981" kindref="member">valueToJson&lt;icUInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref>);</highlight></codeline>
<codeline lineno="125" refid="de/d55/a00323_1adeb96cc39b04eaba5b65f555115dfcb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1adeb96cc39b04eaba5b65f555115dfcb1" kindref="member">valueToJson&lt;icInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref>);</highlight></codeline>
<codeline lineno="126" refid="de/d55/a00323_1aa518217e74bc99aca67bd24bf7750acf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1aa518217e74bc99aca67bd24bf7750acf" kindref="member">valueToJson&lt;icInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref>);</highlight></codeline>
<codeline lineno="127" refid="de/d55/a00323_1acdf23055c826d35552c22ebd95e7a125" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1acdf23055c826d35552c22ebd95e7a125" kindref="member">valueToJson&lt;icInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref>);</highlight></codeline>
<codeline lineno="128" refid="de/d55/a00323_1ad4a82e0b1a3ef95a90d3736d1612028b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1ad4a82e0b1a3ef95a90d3736d1612028b" kindref="member">valueToJson&lt;icInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref>);</highlight></codeline>
<codeline lineno="129" refid="de/d55/a00323_1aa1d6e01ac6e4d4f0309b843e58b110db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1aa1d6e01ac6e4d4f0309b843e58b110db" kindref="member">valueToJson&lt;float&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130" refid="de/d55/a00323_1a2dcbb258d4d23500fe492477af329266" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="de/d55/a00323_1a2dcbb258d4d23500fe492477af329266" kindref="member">valueToJson&lt;double&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="dd/d4e/a00329_1a97423525adfd6890ba86ca8d5ad53299" refkind="member"><highlight class="normal">std::string<sp/><ref refid="de/d55/a00323_1a97423525adfd6890ba86ca8d5ad53299" kindref="member">fixJsonString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::string<sp/>rv;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>*v;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*v<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>+=<sp/>*v;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="148" refid="dd/d4e/a00329_1ad2527818da85a4bb239f5f5afdc4efbc" refkind="member"><highlight class="normal">std::string<sp/><ref refid="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" kindref="member">valueToJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>v)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;name<sp/>cannot<sp/>be<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="de/d55/a00323_1a97423525adfd6890ba86ca8d5ad53299" kindref="member">fixJsonString</ref>(v.c_str())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="158" refid="dd/d4e/a00329_1a039c947e1628b80bf46015650397d664" refkind="member"><highlight class="normal">std::string<sp/><ref refid="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" kindref="member">valueToJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;name<sp/>cannot<sp/>be<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>null&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="de/d55/a00323_1a97423525adfd6890ba86ca8d5ad53299" kindref="member">fixJsonString</ref>(v)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="171" refid="dd/d4e/a00329_1ad0b5bdb7f95051c0e5236d455177b945" refkind="member"><highlight class="normal">std::string<sp/><ref refid="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" kindref="member">valueToJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>v)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;name<sp/>cannot<sp/>be<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>null&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="de/d55/a00323_1a97423525adfd6890ba86ca8d5ad53299" kindref="member">fixJsonString</ref>(v)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overload<sp/>for<sp/>valueToJson<sp/>with<sp/>a<sp/>boolean<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="dd/d4e/a00329_1a5fb9fd80b70025aefdf24cb42a4955e6" refkind="member"><highlight class="normal">std::string<sp/><ref refid="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" kindref="member">valueToJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>bPreviousLine)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;name<sp/>cannot<sp/>be<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&amp;&amp;<sp/>*v)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/><ref refid="de/d55/a00323_1a3e7932b223d3c03d2779e36febbcc670" kindref="member">valueToJson</ref>(name,<sp/>v);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bPreviousLine)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>bPreviousLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="200" refid="dd/d4e/a00329_1a9e557563ac390d47119184276e65ae9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a9e557563ac390d47119184276e65ae9f" kindref="member">jsonToValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/>T&amp;<sp/>nValue)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_number())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>nValue<sp/>=<sp/>j.get&lt;T&gt;();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="de/d55/a00323_1a96266e5f945b9be41d7387b94d97300f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a96266e5f945b9be41d7387b94d97300f" kindref="member">jsonToValue&lt;icInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref>&amp;);</highlight></codeline>
<codeline lineno="211" refid="de/d55/a00323_1ae045dc3553fb33a07534f868a9669d8a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ae045dc3553fb33a07534f868a9669d8a" kindref="member">jsonToValue&lt;icUInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref>&amp;);</highlight></codeline>
<codeline lineno="212" refid="de/d55/a00323_1ad2d628088d9db80185b45b6bdccb12a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ad2d628088d9db80185b45b6bdccb12a8" kindref="member">jsonToValue&lt;icInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref>&amp;);</highlight></codeline>
<codeline lineno="213" refid="de/d55/a00323_1a1146ef4824804a5456e06c31fdd435fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a1146ef4824804a5456e06c31fdd435fc" kindref="member">jsonToValue&lt;icUInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref>&amp;);</highlight></codeline>
<codeline lineno="214" refid="de/d55/a00323_1af9de40fa14a8f73d94bee3c86f625819" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1af9de40fa14a8f73d94bee3c86f625819" kindref="member">jsonToValue&lt;icUInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref>&amp;);</highlight></codeline>
<codeline lineno="215" refid="de/d55/a00323_1a7f9c9b446f169e21934bfd051e1450d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a7f9c9b446f169e21934bfd051e1450d5" kindref="member">jsonToValue&lt;icInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref>&amp;);</highlight></codeline>
<codeline lineno="216" refid="de/d55/a00323_1a2e2ff62841f6bceaf201b121e5da99ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a2e2ff62841f6bceaf201b121e5da99ec" kindref="member">jsonToValue&lt;icUInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref>&amp;);</highlight></codeline>
<codeline lineno="217" refid="de/d55/a00323_1a7b1d04e57c10c570c35d1f134014a355" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a7b1d04e57c10c570c35d1f134014a355" kindref="member">jsonToValue&lt;float&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;);</highlight></codeline>
<codeline lineno="218" refid="de/d55/a00323_1a9fe5e55064a93837c9607c98846a599e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a9fe5e55064a93837c9607c98846a599e" kindref="member">jsonToValue&lt;double&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="dd/d4e/a00329_1afdd3feef27de48318c21d7eb6e15c1a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1afdd3feef27de48318c21d7eb6e15c1a3" kindref="member">jsonToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/>std::string&amp;<sp/>value)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_string())<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>j.get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="231" refid="dd/d4e/a00329_1a95967c363b879bb9b758af80d4af973a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a9e557563ac390d47119184276e65ae9f" kindref="member">jsonToValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>value)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_boolean())<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>j.get&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_number_float())<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>want<sp/>to<sp/>check<sp/>for<sp/>0<sp/>due<sp/>to<sp/>floating<sp/>point<sp/>messiness.<sp/>If<sp/>the<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>0.5,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>definitely<sp/>not<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>j.get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>&gt;<sp/>0.5;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_number_integer())<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>j.get&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_number_unsigned())<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>j.get&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="257" refid="dd/d4e/a00329_1a4af940dd988c61971f0d7961d2c83f6b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a9e557563ac390d47119184276e65ae9f" kindref="member">jsonToValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/>std::string&amp;value)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1afdd3feef27de48318c21d7eb6e15c1a3" kindref="member">jsonToString</ref>(j,<sp/>value);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="263" refid="dd/d4e/a00329_1a1c75825526d396c4a3d02e2be8d5b2bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a1c75825526d396c4a3d02e2be8d5b2bf" kindref="member">jsonToArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>v,<sp/>T*<sp/>vals,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.is_array())<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>e<sp/>!=<sp/>v.end()<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>n;<sp/>e++,<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;is_number())<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals[i]<sp/>=<sp/>e-&gt;get&lt;T&gt;();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValid++;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nValid<sp/>==<sp/>v.size();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="de/d55/a00323_1a8df13aa2900ff6efc8847cc181257329" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a8df13aa2900ff6efc8847cc181257329" kindref="member">jsonToArray&lt;icInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a1e2a836838e5e2f91e107259fdf4eb79" kindref="member">icInt8Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282" refid="de/d55/a00323_1a61ae3d22972ba84219027584052b2d92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a61ae3d22972ba84219027584052b2d92" kindref="member">jsonToArray&lt;icUInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a0462ca2992be7c80b056e640a192b325" kindref="member">icUInt8Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283" refid="de/d55/a00323_1a2eb13bddfcefaf04ee89cd394a3cbec6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a2eb13bddfcefaf04ee89cd394a3cbec6" kindref="member">jsonToArray&lt;icInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a5e869761177c013a4c8da6f57ce55c21" kindref="member">icInt16Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284" refid="de/d55/a00323_1aca74087f564626760f18f3108e34311c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1aca74087f564626760f18f3108e34311c" kindref="member">jsonToArray&lt;icUInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a13b7fe380f7b096933ceaaa7a1e1e3ef" kindref="member">icUInt16Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285" refid="de/d55/a00323_1a2327c5c9fca48446258feda01339cd33" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a2327c5c9fca48446258feda01339cd33" kindref="member">jsonToArray&lt;icInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a1663bd430c0c31a708d9a141fc6b6c45" kindref="member">icInt32Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286" refid="de/d55/a00323_1af6f9688a503547314242f4f564e9a132" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1af6f9688a503547314242f4f564e9a132" kindref="member">jsonToArray&lt;icUInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a63276cc6df51af4efa1945ecae93a182" kindref="member">icUInt32Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287" refid="de/d55/a00323_1aa66e373cef646ba482a3e9ef37b102a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1aa66e373cef646ba482a3e9ef37b102a1" kindref="member">jsonToArray&lt;icInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a86fda7ef911cc680d4cfd0063828a715" kindref="member">icInt64Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288" refid="de/d55/a00323_1ab2375dcf24a7e36bad7eeee7c68ab65c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ab2375dcf24a7e36bad7eeee7c68ab65c" kindref="member">jsonToArray&lt;icUInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/><ref refid="d7/d46/a00002_1a7d5ef7f224b316dacc02ba0bce6d3110" kindref="member">icUInt64Number</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289" refid="de/d55/a00323_1a99b7f325dac3d75544289f6090264485" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a99b7f325dac3d75544289f6090264485" kindref="member">jsonToArray&lt;float&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290" refid="de/d55/a00323_1ace04c15a87eeacd2d12f5c1560996c62" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ace04c15a87eeacd2d12f5c1560996c62" kindref="member">jsonToArray&lt;double&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="dd/d4e/a00329_1a102a8f52f949685f78edbdede31931c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a1c75825526d396c4a3d02e2be8d5b2bf" kindref="member">jsonToArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>v,<sp/>std::vector&lt;std::string&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.is_array())<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>vals.resize(nSize);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>e<sp/>!=<sp/>v.end();<sp/>e++,<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;is_string())<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals[i]<sp/>=<sp/>e-&gt;get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValid++;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals[i]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nValid<sp/>==<sp/>nSize;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="dd/d4e/a00329_1a5d0fcb48d25a5fba1df1a512deec6810" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a5d0fcb48d25a5fba1df1a512deec6810" kindref="member">jsonToList</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>v,<sp/>std::list&lt;std::string&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.is_array())<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>e<sp/>!=<sp/>v.end();<sp/>e++,<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;is_string())<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals.push_back(e-&gt;get&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValid++;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nValid<sp/>==<sp/>nSize;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="333" refid="dd/d4e/a00329_1a033c08ed43b1a69fa6a0b7b546810a75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a1c75825526d396c4a3d02e2be8d5b2bf" kindref="member">jsonToArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>v,<sp/>std::vector&lt;T&gt;&amp;<sp/>a)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.is_array())<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>a.resize(nSize);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>e<sp/>!=<sp/>v.end();<sp/>e++,<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;is_number())<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>e-&gt;get&lt;T&gt;();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValid++;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nValid<sp/>==<sp/>v.size();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="de/d55/a00323_1ac369cfa994f9edc702bdac99f6a91426" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a8df13aa2900ff6efc8847cc181257329" kindref="member">jsonToArray&lt;icInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector&lt;icInt8Number&gt;&amp;);</highlight></codeline>
<codeline lineno="356" refid="de/d55/a00323_1a9f37b58701b55e8c0358de63b6e71313" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a61ae3d22972ba84219027584052b2d92" kindref="member">jsonToArray&lt;icUInt8Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icUInt8Number&gt;&amp;);</highlight></codeline>
<codeline lineno="357" refid="de/d55/a00323_1a71afd553a447b4f21b66be76685bddf6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a2eb13bddfcefaf04ee89cd394a3cbec6" kindref="member">jsonToArray&lt;icInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icInt16Number&gt;&amp;);</highlight></codeline>
<codeline lineno="358" refid="de/d55/a00323_1af8137e8db32449061a0744d04d4cf958" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1aca74087f564626760f18f3108e34311c" kindref="member">jsonToArray&lt;icUInt16Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icUInt16Number&gt;&amp;);</highlight></codeline>
<codeline lineno="359" refid="de/d55/a00323_1aacea74a6830eab83023e67d25115b35f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a2327c5c9fca48446258feda01339cd33" kindref="member">jsonToArray&lt;icInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icInt32Number&gt;&amp;);</highlight></codeline>
<codeline lineno="360" refid="de/d55/a00323_1adbcef783339da3dfdd0b6308744971b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1af6f9688a503547314242f4f564e9a132" kindref="member">jsonToArray&lt;icUInt32Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icUInt32Number&gt;&amp;);</highlight></codeline>
<codeline lineno="361" refid="de/d55/a00323_1ac7886ed9a4caa3e6a22b41ad4133c1bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1aa66e373cef646ba482a3e9ef37b102a1" kindref="member">jsonToArray&lt;icInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icInt64Number&gt;&amp;);</highlight></codeline>
<codeline lineno="362" refid="de/d55/a00323_1a9428f3a61580d6692a91ebc25d260ea4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ab2375dcf24a7e36bad7eeee7c68ab65c" kindref="member">jsonToArray&lt;icUInt64Number&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector<sp/>&lt;<sp/>icUInt64Number&gt;&amp;);</highlight></codeline>
<codeline lineno="363" refid="de/d55/a00323_1aac7cccdebda264b8d46244630dc22148" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a99b7f325dac3d75544289f6090264485" kindref="member">jsonToArray&lt;float&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector&lt;float&gt;&amp;);</highlight></codeline>
<codeline lineno="364" refid="de/d55/a00323_1aafdace1e5c32e16b3a7288bb66fac3d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ace04c15a87eeacd2d12f5c1560996c62" kindref="member">jsonToArray&lt;double&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;,<sp/>std::vector&lt;double&gt;&amp;);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="dd/d4e/a00329_1af234f015837440b33d2b84ee2eb3f4d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1af234f015837440b33d2b84ee2eb3f4d9" kindref="member">jsonToCStr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j.is_string()<sp/>&amp;&amp;<sp/>nSize&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>val<sp/>=<sp/>j.get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(str,<sp/>val.c_str(),<sp/>nSize);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>str[nSize<sp/>-<sp/>1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="dd/d4e/a00329_1a825829a545b125b794248ed18a2c3012" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a825829a545b125b794248ed18a2c3012" kindref="member">jsonToColorSpace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/><ref refid="d7/d46/a00002_1a61e8bac86860cdefe93533feac126917" kindref="member">icColorSpaceSignature</ref>&amp;<sp/>sig)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="de/d55/a00323_1a9e557563ac390d47119184276e65ae9f" kindref="member">jsonToValue</ref>(j,<sp/>str))<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.size())</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>=<sp/>(<ref refid="d7/d46/a00002_1a61e8bac86860cdefe93533feac126917" kindref="member">icColorSpaceSignature</ref>)<ref refid="d7/dce/a00143_1a3a009765ea132eda6aadf6bedbf10e2d" kindref="member">icGetSigVal</ref>(str.c_str());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>=<sp/><ref refid="d7/d46/a00002_1a80236e8e78fa1f2a6351cb0af0fed8da" kindref="member">icSigUnknownData</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="dd/d4e/a00329_1a9533077714414745c078b20e5ffe414e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1ac9d77e7820256342aa2bb1f73f7b387b" kindref="member">saveJsonAs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szFname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!j.is_object())</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>FILE*<sp/>f;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(szFname<sp/>&amp;&amp;<sp/>szFname[0])</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>fopen(szFname,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/>j.dump(indent);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(str.c_str()),<sp/>1,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)str.size(),<sp/>f)<sp/>==<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)str.size())</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f!=stdout)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="dd/d4e/a00329_1a1a7e979d2174bbe4adf411c6807d202b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d55/a00323_1a1a7e979d2174bbe4adf411c6807d202b" kindref="member">loadJsonFrom</ref>(<ref refid="dd/d4e/a00329_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">json</ref>&amp;<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szFname)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>j.clear();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>FILE*<sp/>f<sp/>=<sp/>fopen(szFname,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flen<sp/>=<sp/>ftell(f);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(flen+1);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[flen]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(buf,<sp/>1,<sp/>flen,<sp/>f)<sp/>==<sp/>flen)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>json::parse(buf);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(buf);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Tools/CmdLine/IccCommon/IccJsonUtil.cpp"/>
  </compounddef>
</doxygen>
